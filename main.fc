global Red: 1;
global Green: 2;
global Blue: 4;
global Cyan: Green | Blue;
global Purple: Red | Blue;
global Yellow: Red | Green;
global Gray: Cyan + 1;

global Width: 800;
global Height: 600;

global TileSize: 32;
global BorderSize: 4;
global GridSize: 1;
global Padding: 4;

struct Color
{
    r,
    g,
    b
};

struct Tile
{
    x: 0,
    y: 0
};

struct Requirement
{
    color,
    count
};

struct Map
{
    title,
    tiles,
    requirements
};

struct State
{
    renderer,
    font,
    titleFont,
    maps,
    activeColor,

    cursor: Tile {},
    mapIndex: 0
};

struct EventState
{
    u32 type: 0u32,

    SDL::KeyboardEvent key,
    SDL::MouseMotionEvent motion,
    SDL::MouseButtonEvent button,
    SDL::MouseWheelEvent wheel
};

function rgb(i32 r, i32 g, i32 b)
{
    return Color
    {
        r: r,
        g: g,
        b: b
    };
}

function createEventState()
{
    return EventState
    {
        key: SDL::KeyboardEvent {},
        motion: SDL::MouseMotionEvent {},
        button: SDL::MouseButtonEvent {},
        wheel: SDL::MouseWheelEvent {},
    };
}

function mapBounds(Map map)
{
    let size = Math::sqrt(Range::size(...map.tiles, 0));

    return SDL::Rect
    {
        x: TileSize * 3,
        y: TileSize * 3,
        width: size * TileSize,
        height: size * TileSize
    };
}

function inflate(SDL::Rect rect, i32 x, i32 y)
{
    return rect with
    {
        x: rect.x - (x / 2),
        y: rect.y - (y / 2),
        width: rect.width + x,
        height: rect.height + y
    };
}

function isTileUnderCursor(Tile tile, Tile cursor)
{
    return (Math::abs(cursor.x - tile.x) <= 1)
        && (Math::abs(cursor.y - tile.y) <= 1);
}

function colorForTile(Color activeColor, Color tileColor, bool satisfied, Tile tile, Tile cursor)
{
    if (isTileUnderCursor(tile, cursor) && !satisfied)
    {
        return activeColor;
    }

    return tileColor;
}

function colorForTile(Color activeColor, without tileColor, bool satisfied, Tile tile, Tile cursor)
{
    if (isTileUnderCursor(tile, cursor) && !satisfied)
    {
        return activeColor;
    }

    return rgb(0, 0, 0);
}

function colorForTile(any activeColor, any tileColor, bool satisfied, Tile tile, Tile cursor)
{
    return rgb(0, 0, 0);
}

function drawGrid(bool satisfied, Map map, State state, SDL::Rect outerBounds, i32 i, i32 color)
{
    let size = Math::sqrt(Range::size(...map.tiles, 0));

    let tile = tileFromIndex(i, size);

    let bounds = SDL::Rect
    {
        x: (outerBounds.x + BorderSize) + ((tile.x * TileSize) + (tile.x * GridSize)),
        y: (outerBounds.y + BorderSize) + ((tile.y * TileSize) + (tile.y * GridSize)),
        width: TileSize,
        height: TileSize
    };

    let tileColor = colorForTile(rgbFor(state.activeColor), rgbFor(color), satisfied, tile, state.cursor);

    SDL::SDL_SetRenderDrawColor(state.renderer, tileColor.r, tileColor.g, tileColor.b, 255);
    SDL::SDL_RenderFillRect(state.renderer, bounds);

    return nothing;
}

function tileFromIndex(i32 index, i32 size)
{
    let x = (index % size);
    let y = (index - x) / size;

    return Tile
    {
        x: x,
        y: y
    };
}

function drawGrid(bool satisfied, Map map, State state, SDL::Rect outerBounds, i32 i, (i32 color, ...indexes))
{
    drawGrid(satisfied, map, state, outerBounds, i, color);

    return tail drawGrid(satisfied, map, state, outerBounds, i + 1, ...indexes);
}

function drawMap(bool satisfied, without map, State state)
{
    return drawOverlayText(state, "Congratulations! You managed to clear all levels!");
}

function drawMap(bool satisfied, Map map, State state)
{
    let numberOfTiles = Range::size(...map.tiles, 0);
    let size = Math::sqrt(numberOfTiles);

    let innerBounds = mapBounds(map);
    let outerBounds = inflate(innerBounds
        , (BorderSize * 2) + (GridSize * (size - 1))
        , (BorderSize * 2) + (GridSize * (size - 1))
        );

    SDL::SDL_SetRenderDrawColor(state.renderer, 255, 255, 255, 255);
    SDL::SDL_RenderFillRect(state.renderer, outerBounds);

    drawGrid(satisfied, map, state, outerBounds, 0, ...map.tiles);
    drawRequirement(map, state, (outerBounds.x + outerBounds.width) + TileSize, outerBounds.y, ...map.requirements);
    drawTile(state, outerBounds.x + ((outerBounds.width - TileSize) / 2), (outerBounds.y + outerBounds.height) + TileSize, rgbFor(state.activeColor));
    drawText(state, TileSize * 3, TileSize, map.title);

    return outerBounds;
}

function drawTile(State state, i32 x, i32 y, without color)
{
    return nothing;
}

function drawTile(State state, i32 x, i32 y, Color color)
{
    let bounds = SDL::Rect
    {
        x: x,
        y: y,
        width: TileSize,
        height: TileSize
    };

    SDL::SDL_SetRenderDrawColor(state.renderer, color.r, color.g, color.b, 255);
    SDL::SDL_RenderFillRect(state.renderer, bounds);

    return nothing;
}

function drawText(State state, i32 x, i32 y, string text)
{
    let surface = SDL::TTF::RenderText_Solid(state.font, text, 255, 255, 255);
    let texture = SDL::SDL_CreateTextureFromSurface(state.renderer, surface);

    let height = SDL::GetSurfaceHeight(surface);

    let rect = SDL::Rect
    {
        x: x,
        y: y + ((TileSize - height) / 2),
        width: SDL::GetSurfaceWidth(surface),
        height: height
    };

	SDL::SDL_RenderCopy(state.renderer, texture, 0i64, rect);
	SDL::SDL_FreeSurface(surface);

    return nothing;
}

function isColor(i32 actual, i32 lookingFor)
{
    return actual == lookingFor;
}

function countForColor(Map map, i32 color)
{
    return Range::count(map.tiles, color, isColor);
}

function rgbFor(i32 colorIndex)
{
    if (colorIndex == Red)
    {
        return rgb(162, 38, 51);
    }

    if (colorIndex == Green)
    {
        return rgb(62, 137, 72);
    }

    if (colorIndex == Blue)
    {
        return rgb(18, 78, 137);
    }

    if (colorIndex == Cyan)
    {
        return rgb(44, 232, 245);
    }

    if (colorIndex == Yellow)
    {
        return rgb(254, 174, 52);
    }

    if (colorIndex == Purple)
    {
        return rgb(104, 56, 108);
    }

    if (colorIndex == Gray)
    {
        return rgb(139, 155, 180);
    }

    return rgb(0, 0, 0);
}

function drawRequirement(Map map, State state, i32 x, i32 y, Requirement requirement)
{
    let count = countForColor(map, requirement.color);
    let color = rgbFor(requirement.color);

    let text = String::format("{}{} / {}{}", [
        (count - (count % 10)) / 10, count,
        (requirement.count - (requirement.count % 10)) / 10, requirement.count]
    );

    drawTile(state, x, y, color);
    drawText(state, (x + TileSize) + (Padding * 3), y, Cast::toString(Memory::serialize(text)));

    return nothing;
}

function drawRequirement(Map map, State state, i32 x, i32 y, (Requirement requirement, ...requirements))
{
    drawRequirement(map, state, x, y, requirement);

    return tail drawRequirement(map, state, x, (y + TileSize) + Padding, ...requirements);
}

function changeActiveColor(State state, SDL::MouseWheelEvent wheel)
{
    if (wheel.y > 0)
    {
        return state with
        {
            activeColor: Math::min(Blue, state.activeColor << 1)
        };
    }

    if (wheel.y < 0)
    {
        return state with
        {
            activeColor: Math::max(1, state.activeColor >> 1)
        };
    }

    return state;
}

function changeCursorPosition(Map map, State state, SDL::MouseMotionEvent motion)
{
    let innerBounds = mapBounds(map);

    return state with
    {
        cursor: Tile
        {
            x: ((motion.x - innerBounds.x) / (TileSize + GridSize)),
            y: ((motion.y - innerBounds.y) / (TileSize + GridSize))
        }
    };
}

function blendColors(i32 left, i32 right)
{
    return Math::min(Gray, left | right);
}

function placeTile(i32 i, i32 size, i32 color, State state)
{
    let tile = tileFromIndex(i, size);

    if (isTileUnderCursor(tile, state.cursor))
    {
        return blendColors(color, state.activeColor);
    }

    return color;
}

function placeTile(i32 i, i32 size, (i32 color, ...tiles), State state)
{
    return placeTile(i, size, color, state) -> placeTile(i + 1, size, ...tiles, state);
}

function placeTile(Map map, State state)
{
    let size = Math::sqrt(Range::size(...map.tiles, 0));

    return map with
    {
        tiles: Memory::serialize(placeTile(0, size, ...map.tiles, state))
    };
}

function placeTile(i32 i, Map map, State state)
{
    if (i != state.mapIndex)
    {
        return map;
    }

    return placeTile(map, state);
}

function placeTile(i32 i, (Map map, ...maps), State state)
{
    if (i != state.mapIndex)
    {
        return map -> placeTile(i + 1, ...maps, state);
    }

    return placeTile(map, state) -> placeTile(i + 1, ...maps, state);
}

function placeTile(State state)
{
    return state with
    {
        maps: placeTile(0, ...state.maps, state)
    };
}

function processKeyDown(Map map, SDL::KeyboardEvent key)
{
    if (key.sym == SDL::SDLK_s)
    {
        return map with
        {
            tiles: Memory::allocate(Cast::toInt64(Range::size(...map.tiles, 0)))
        };
    }

    return map;
}

function processKeyDown(i32 i, Map map, State state, SDL::KeyboardEvent key)
{
    if (i != state.mapIndex)
    {
        return map;
    }

    return processKeyDown(map, key);
}

function processKeyDown(i32 i, (Map map, ...maps), State state, SDL::KeyboardEvent key)
{
    if (i != state.mapIndex)
    {
        return map -> processKeyDown(i + 1, ...maps, state, key);
    }

    return processKeyDown(map, key) -> processKeyDown(i + 1, ...maps, state, key);
}

function processKeyDown(State state, SDL::KeyboardEvent key)
{
    return state with
    {
        maps: processKeyDown(0, ...state.maps, state, key)
    };
}

function handleInput(Map map, State state, EventState events, bool satisfied)
{
    if (events.type == SDL::MOUSEWHEEL)
    {
        return changeActiveColor(state, events.wheel);
    }

    if (events.type == SDL::MOUSEMOTION)
    {
        return changeCursorPosition(map, state, events.motion);
    }

    if (events.type == SDL::MOUSEBUTTONUP)
    {
        if (satisfied)
        {
            return state with
            {
                mapIndex: state.mapIndex + 1
            };
        }

        return placeTile(state);
    }

    if (events.type == SDL::KEYDOWN)
    {
        return processKeyDown(state, events.key);
    }

    return state;
}

function handleInput(without map, State state, EventState events, bool satisfied)
{
    return state;
}

function requirementSatisfied(Requirement requirement, Map map)
{
    return countForColor(map, requirement.color) == requirement.count;
}

function requirementsSatisfied(Map map)
{
    return Range::all(map.requirements, map, requirementSatisfied);
}

function requirementsSatisfied(without map)
{
    return false;
}

function drawOverlayText(State state, string text)
{
    let viewport = SDL::Rect
    {
        width: Width,
        height: Height
    };

    SDL::SDL_SetRenderDrawColor(state.renderer, 0, 0, 0, 150);
    SDL::SDL_RenderFillRect(state.renderer, viewport);

    let surface = SDL::TTF::RenderText_Solid(state.titleFont, text, 255, 255, 255);
    let texture = SDL::SDL_CreateTextureFromSurface(state.renderer, surface);

    let width = SDL::GetSurfaceWidth(surface);
    let height = SDL::GetSurfaceHeight(surface);

    let rect = SDL::Rect
    {
        x: (Width - width) / 2,
        y: (Height - height) / 2,
        width: width,
        height: height
    };

    SDL::SDL_RenderCopy(state.renderer, texture, 0i64, rect);
    SDL::SDL_FreeSurface(surface);

    return nothing;
}

function drawWinCondition(bool satisfied, State state)
{
    if (satisfied)
    {
        return drawOverlayText(state, "Level cleared!");
    }

    return nothing;
}

function mainLoop(State state)
{
    SDL::SDL_SetRenderDrawBlendMode(state.renderer, SDL::BLENDMODE_BLEND);
	SDL::SDL_SetRenderDrawColor(state.renderer, 0, 0, 0, 0);
	SDL::SDL_RenderClear(state.renderer);

    let map = Range::elementAt(...state.maps, state.mapIndex, 0);
    let satisfied = requirementsSatisfied(map);

    drawMap(satisfied, map, state);
    drawWinCondition(satisfied, state);

	SDL::SDL_RenderPresent(state.renderer);

    let events = SDL::SDL_WaitEventEx(createEventState());

    if (events.type == SDL::SDL_QUIT)
    {
        return 0;
    }

    return tail mainLoop(
        handleInput(map, state, events, satisfied)
    );
}

export i32 main()
{
    SDL::SDL_Init(SDL::INIT_VIDEO);
    SDL::TTF::TTF_Init();

	let window = SDL::SDL_CreateWindow("ld54", 0, 0, Width, Height, 0);
	let renderer = SDL::SDL_CreateRenderer(window, 0, 0);

	let state = State
	{
        renderer: renderer,
        font: SDL::TTF::TTF_OpenFont("NotoSans-Regular.ttf", 15),
        titleFont: SDL::TTF::TTF_OpenFont("NotoSans-Bold.ttf", 20),
        maps: [
            Map
            {
                title: "A gentle introduction",
                tiles: Memory::allocate(36i64),
                requirements: [
                    Requirement
                    {
                        color: Red,
                        count: 9
                    },
                    Requirement
                    {
                        color: Green,
                        count: 9
                    },
                    Requirement
                    {
                        color: Blue,
                        count: 9
                    },
                ]
            },
            Map
            {
                title: "Cut it out",
                tiles: Memory::allocate(16i64),
                requirements: [
                    Requirement
                    {
                        color: Red,
                        count: 4
                    },
                    Requirement
                    {
                        color: Green,
                        count: 4
                    },
                    Requirement
                    {
                        color: Blue,
                        count: 4
                    },
                ]
            },
            Map
            {
                title: "Blending colors!",
                tiles: Memory::allocate(25i64),
                requirements: [
                    Requirement
                    {
                        color: Yellow,
                        count: 9
                    },
                    Requirement
                    {
                        color: Red,
                        count: 16
                    },
                ]
            },
            Map
            {
                title: "Everything fades to gray",
                tiles: Memory::allocate(9i64),
                requirements: [
                    Requirement
                    {
                        color: Gray,
                        count: 9
                    }
                ]
            },
            Map
            {
                title: "More colors",
                tiles: Memory::allocate(49i64),
                requirements: [
                    Requirement
                    {
                        color: Red,
                        count: 9
                    },
                    Requirement
                    {
                        color: Green,
                        count: 4
                    },
                    Requirement
                    {
                        color: Blue,
                        count: 4
                    },
                    Requirement
                    {
                        color: Cyan,
                        count: 6
                    },
                    Requirement
                    {
                        color: Purple,
                        count: 6
                    },
                    Requirement
                    {
                        color: Yellow,
                        count: 6
                    },
                    Requirement
                    {
                        color: Gray,
                        count: 6
                    },
                ]
            },
            Map
            {
                title: "Rainbow to eternity",
                tiles: Memory::allocate(25i64),
                requirements: [
                    Requirement
                    {
                        color: Blue,
                        count: 5
                    },
                    Requirement
                    {
                        color: Cyan,
                        count: 3
                    },
                    Requirement
                    {
                        color: Green,
                        count: 2
                    },
                    Requirement
                    {
                        color: Gray,
                        count: 1
                    },
                    Requirement
                    {
                        color: Yellow,
                        count: 3
                    },
                    Requirement
                    {
                        color: Red,
                        count: 5
                    },
                ]
            },
            Map
            {
                title: "Cold as ice",
                tiles: Memory::allocate(25i64),
                requirements: [
                    Requirement
                    {
                        color: Cyan,
                        count: 12
                    },
                    Requirement
                    {
                        color: Blue,
                        count: 4
                    },
                    Requirement
                    {
                        color: Gray,
                        count: 9
                    },
                ]
            },
            Map
            {
                title: "Poison river",
                tiles: Memory::allocate(25i64),
                requirements: [
                    Requirement
                    {
                        color: Purple,
                        count: 20
                    },
                    Requirement
                    {
                        color: Green,
                        count: 1
                    },
                    Requirement
                    {
                        color: Cyan,
                        count: 1
                    },
                    Requirement
                    {
                        color: Blue,
                        count: 1
                    },
                    Requirement
                    {
                        color: Red,
                        count: 1
                    },
                    Requirement
                    {
                        color: Gray,
                        count: 1
                    },
                ]
            },
        ],
        activeColor: Red
	};

	return mainLoop(state);
}
